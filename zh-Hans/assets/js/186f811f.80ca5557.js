"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8464],{3588:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>t,contentTitle:()=>r,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var s=i(4848),a=i(8453);const l={sidebar_position:4},r="LSP",o={id:"Neovim/Plugins/lsp",title:"LSP",description:"LSP \u7684\u5168\u540d\u70ba Language Server Protocol\uff0c\u5982\u540d\u6240\u8ff0\uff0c\u5b83\u5b9a\u7fa9\u4e86 Language Clients \u8207 Language Servers \u5c0d\u63a5\u7684\u65b9\u6cd5\u3002Language Servers \u63d0\u4f9b\u4e86\u5373\u6642\u7684\u8a9e\u6cd5\u5206\u6790\uff0c\u7576\u5b89\u88dd\u4e86\u67d0\u500b\u8a9e\u8a00\u7684 Language Server \u5f8c\u4e0d\u540c\u7684 Language Clients \uff08\u5982 Neovim\u3001VSCode \u7b49\u7de8\u8f2f\u5668\uff09\u5c31\u53ef\u4ee5\u8207\u8a72 Language Server \u6e9d\u901a\uff0c\u5448\u73fe\u7de8\u8f2f\u6642\u7684\u8a9e\u6cd5\u6aa2\u67e5\u3001\u7a0b\u5f0f\u78bc\u88dc\u9f4a\u7b49\u529f\u80fd\u3002Neovim \u4e2d\u6709\u8a31\u591a\u8207 LSP \u76f8\u95dc\u7684 Plugins \u53ef\u4ee5\u5e6b\u52a9\u4f7f\u7528\u8005\u7ba1\u7406 LSP Servers \u8207\u8a2d\u5b9a LSP Clients\u3002",source:"@site/docs/Neovim/Plugins/lsp.md",sourceDirName:"Neovim/Plugins",slug:"/Neovim/Plugins/lsp",permalink:"/zh-Hans/docs/Neovim/Plugins/lsp",draft:!1,unlisted:!1,editUrl:"https://github.com/cpching/docs/Neovim/Plugins/lsp.md",tags:[],version:"current",lastUpdatedAt:1726926754e3,sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Package Manager: Mason",permalink:"/zh-Hans/docs/Neovim/Plugins/package-manager-mason"},next:{title:"linting",permalink:"/zh-Hans/docs/Neovim/Plugins/linting"}},t={},c=[{value:"LSP Servers Management: mason-lspconfig",id:"lsp-servers-management-mason-lspconfig",level:2},{value:"Installation and Configuration",id:"installation-and-configuration",level:3},{value:"LSP Client Management: nvim-lspconfig",id:"lsp-client-management-nvim-lspconfig",level:2},{value:"Installation and Configuration",id:"installation-and-configuration-1",level:3}];function u(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"lsp",children:"LSP"}),"\n",(0,s.jsx)(e.p,{children:"LSP \u7684\u5168\u540d\u70ba Language Server Protocol\uff0c\u5982\u540d\u6240\u8ff0\uff0c\u5b83\u5b9a\u7fa9\u4e86 Language Clients \u8207 Language Servers \u5c0d\u63a5\u7684\u65b9\u6cd5\u3002Language Servers \u63d0\u4f9b\u4e86\u5373\u6642\u7684\u8a9e\u6cd5\u5206\u6790\uff0c\u7576\u5b89\u88dd\u4e86\u67d0\u500b\u8a9e\u8a00\u7684 Language Server \u5f8c\u4e0d\u540c\u7684 Language Clients \uff08\u5982 Neovim\u3001VSCode \u7b49\u7de8\u8f2f\u5668\uff09\u5c31\u53ef\u4ee5\u8207\u8a72 Language Server \u6e9d\u901a\uff0c\u5448\u73fe\u7de8\u8f2f\u6642\u7684\u8a9e\u6cd5\u6aa2\u67e5\u3001\u7a0b\u5f0f\u78bc\u88dc\u9f4a\u7b49\u529f\u80fd\u3002Neovim \u4e2d\u6709\u8a31\u591a\u8207 LSP \u76f8\u95dc\u7684 Plugins \u53ef\u4ee5\u5e6b\u52a9\u4f7f\u7528\u8005\u7ba1\u7406 LSP Servers \u8207\u8a2d\u5b9a LSP Clients\u3002"}),"\n",(0,s.jsxs)(e.h2,{id:"lsp-servers-management-mason-lspconfig",children:["LSP Servers Management: ",(0,s.jsx)(e.a,{href:"https://github.com/williamboman/mason-lspconfig.nvim",children:"mason-lspconfig"})]}),"\n",(0,s.jsxs)(e.p,{children:["mason-lspconfig \u7528\u4f86\u6a4b\u63a5 ",(0,s.jsx)(e.a,{href:"/zh-Hans/docs/Neovim/Plugins/package-manager-mason",children:"Mason"})," \u548c Neovim\u3002\u5b83\u53ef\u4ee5\u7528\u4f86\u6aa2\u67e5\u6240\u9700\u7684 LSP servers\uff08Mason \u6709\u63d0\u4f9b\u7684\uff09\u662f\u5426\u5b89\u88dd\u4e86\uff0c\u4e5f\u53ef\u4ee5\u8a2d\u5b9a\u6210\u5982\u679c\u9084\u6c92\u5c31\u6703\u5e6b\u4f7f\u7528\u8005\u81ea\u52d5\u900f\u904e Mason \u4e0b\u8f09\u5b89\u88dd\u3002"]}),"\n",(0,s.jsx)(e.h3,{id:"installation-and-configuration",children:"Installation and Configuration"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\u5728 ",(0,s.jsx)(e.code,{children:"lua/plugins/"})," \u4e0b\u65b0\u589e\u4e00\u500b ",(0,s.jsx)(e.code,{children:"lsp.lua"})," \u6a94\u6848\uff0c\u5728\u8a72\u6a94\u6848\u4e2d\u65b0\u589e\u4e00\u500b ",(0,s.jsx)(e.code,{children:"language_servers"})," list \u548c plugin \u7684\u8a2d\u5b9a\u5167\u5bb9\uff0c\u5132\u5b58\u5f8c\u900f\u904e ",(0,s.jsx)(e.code,{children:":Lazy"})," \u9032\u5165 Lazy console \u9032\u884c plugin \u5b89\u88dd\u3002","\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'language_servers = {\n    <server_name_1>, -- e.g. "lua_ls"\n    <server_name_2>, -- e.g. "tsserver"\n    -- ...\n}\nreturn\n{\n    {\n        \'williamboman/mason-lspconfig.nvim\', -- plugin-short-url\n        config = function()\n            require("mason-lspconfig").setup({\n                ensure_installed = language_servers,\n                automatic_installation = true,\n            })\n        end,\n        dependencies = { \'williamboman/mason.nvim\' }\n    },\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\u5132\u5b58\u9000\u51fa\u5f8c\u518d\u9032\u5165 Neovim \u5c31\u6703\u958b\u59cb\u81ea\u52d5\u5b89\u88dd ",(0,s.jsx)(e.code,{children:"language_servers"})," \u4e2d\u5beb\u7684 LSP Servers\u3002"]}),"\n",(0,s.jsxs)(e.li,{children:["Note: \u5229\u7528 ",(0,s.jsx)(e.code,{children:":MasonInstall <server_name>"})," \u7684 ",(0,s.jsx)(e.code,{children:"<server_name>"})," \u8ddf\u5beb\u5728 ",(0,s.jsx)(e.code,{children:"language_servers"})," \u4e2d\u7684 ",(0,s.jsx)(e.code,{children:"<server_name>"})," \u53ef\u80fd\u6703\u4e0d\u540c\u3002","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["e.g. \u8981\u5229\u7528 mason-lspconfig \u81ea\u52d5\u5b89\u88dd typescript-language-server \u7684\u8a71\uff0c",(0,s.jsx)(e.code,{children:"language_servers"})," \u4e2d\u8981\u5beb\u5165 ",(0,s.jsx)(e.code,{children:'"tsserver"'})," \u800c\u975e ",(0,s.jsx)(e.code,{children:'"typescript-language-server"'})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"lsp-client-management-nvim-lspconfig",children:["LSP Client Management: ",(0,s.jsx)(e.a,{href:"https://github.com/neovim/nvim-lspconfig",children:"nvim-lspconfig"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"nvim-lspconfig"})," \u63d0\u4f9b LSP Clients \u7684\u5ba2\u88fd\u5316\u9078\u9805\uff0c\u4f8b\u5982\u662f\u5426\u8981\u5229\u7528\u6d6e\u52d5\u8996\u7a97\u5448\u73fe\u8a0a\u606f\u3001\u8b66\u544a\u548c\u932f\u8aa4\u7684\u7b26\u865f\u8a72\u662f\u4ec0\u9ebc\u3001\u6bcf\u500b language servers \u4f7f\u7528\u6642\u6709\u4ec0\u9ebc\u8a2d\u5b9a\u7b49\u3002\u6211\u500b\u4eba\u8a8d\u70ba nvim-lspconfig \u662f Neovim \u4e2d\u8a2d\u5b9a\u8d77\u4f86\u524d\u4e09\u7e41\u96dc\u7684 plugin\uff0c\u4e0d\u904e\u7406\u89e3\u4e4b\u5f8c\u5176\u5b83\u7684 plugin \u8a2d\u5b9a\u5c31\u986f\u5f97\u5bb9\u6613\u591a\u4e86\u3002"]}),"\n",(0,s.jsx)(e.h3,{id:"installation-and-configuration-1",children:"Installation and Configuration"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\u7e7c\u7e8c\u5728 ",(0,s.jsx)(e.code,{children:"lua/plugins/lsp.lua"})," \u6a94\u6848\u4e2d mason-lspconfig \u8a2d\u5b9a\u5f8c\u65b0\u589e nvim-lspconfig \u7684\u8a2d\u5b9a\uff0c\u5132\u5b58\u5f8c\u900f\u904e ",(0,s.jsx)(e.code,{children:":Lazy"})," \u9032\u5165 Lazy console \u9032\u884c plugin \u5b89\u88dd\u3002","\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'return \n{\n    {\n        \'williamboman/mason-lspconfig.nvim\', -- plugin-short-url\n        config = function()\n            require("mason-lspconfig").setup({\n                ensure_installed = language_servers,\n                automatic_installation = true,\n            })\n        end,\n        dependencies = { \'williamboman/mason.nvim\' }\n    },\n    {\n        \'neovim/nvim-lspconfig\',\n        enabled = true,\n        dependencies = { "williamboman/mason-lspconfig.nvim", "williamboman/mason.nvim", "hrsh7th/cmp-nvim-lsp" },\n        config = function()\n            -- Function to run when attaching to a new buffer with an LSP client.\n            local on_attach = function(client, bufnr)\n                if client.name == "tsserver" then\n                    client.server_capabilities.documentFormattingProvider = false\n                end\n                -- Keymap options\n                local opts = { noremap = true, silent = true }\n                -- Keymap api\n                local buf_keymap = vim.api.nvim_buf_set_keymap\n                buf_keymap(bufnr, "n", "<leader>gD", "<cmd>lua vim.lsp.buf.declaration()<CR>", opts)\n                buf_keymap(bufnr, "n", "<leader>gd", "<cmd>lua vim.lsp.buf.definition()<CR>", opts)\n                buf_keymap(bufnr, "n", "K", "<cmd>lua vim.lsp.buf.hover()<CR>", opts)\n                buf_keymap(bufnr, "n", "gi", "<cmd>lua vim.lsp.buf.implementation()<CR>", opts)\n                buf_keymap(bufnr, "n", "<C-s>", "<cmd>lua vim.lsp.buf.signature_help()<CR>", opts)\n                buf_keymap(bufnr, "n", "gr", "<cmd>lua vim.lsp.buf.references()<CR>", opts)\n                buf_keymap(bufnr, "n", "gl", \'<cmd>lua vim.diagnostic.open_float()<CR>\', opts)\n                buf_keymap(bufnr, "n", "[d", \'<cmd>lua vim.diagnostic.goto_prev({ border = "rounded" })<CR>\', opts)\n                buf_keymap(bufnr, "n", "]d", \'<cmd>lua vim.diagnostic.goto_next({ border = "rounded" })<CR>\', opts)\n                buf_keymap(bufnr, "n", "<leader>q", "<cmd>lua vim.diagnostic.setloclist()<CR>", opts)\n                vim.cmd [[ command! Format execute \'lua vim.lsp.buf.formatting()\' ]]\n                -- vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>ca", "<cmd>lua vim.lsp.buf.code_action()<CR>", opts)\n                -- vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>rn", "<cmd>lua vim.lsp.buf.rename()<CR>", opts)\n            end\n\n            -- The `nvim-cmp` almost supports LSP\'s capabilities so You should advertise it to LSP servers..\n            local capabilities\n            local status_ok, cmp_nvim_lsp = pcall(require, "cmp_nvim_lsp")\n            if status_ok then\n                capabilities = cmp_nvim_lsp.default_capabilities()\n            end\n\n            local lspconfig = require(\'lspconfig\')\n\n            -- Define diagnostic signs for error, warning, hint, and info.\n            local signs = {\n                { name = "DiagnosticSignError", text = "\uf057" },\n                { name = "DiagnosticSignWarn", text = "\uf071" },\n                { name = "DiagnosticSignHint", text = "\uf05a" },\n                { name = "DiagnosticSignInfo", text = "\uf059" },\n            }\n            for _, sign in ipairs(signs) do\n                vim.fn.sign_define(sign.name, { texthl = sign.name, text = sign.text, numhl = "" })\n            end\n\n            -- Define diagnostic configuration for virtual text, signs, and float windows.\n            local config = {\n                virtual_text = true,\n                signs = {\n                    active = signs,\n                },\n                update_in_insert = true,\n                underline = true,\n                severity_sort = true,\n                float = {\n                    focusable = true,\n                    style = "minimal",\n                    border = "rounded",\n\n                    header = "",\n                    prefix = "",\n                },\n            }\n\n            -- Configure diagnostics with defined settings.\n            vim.diagnostic.config(config)\n\n            -- Customize hover and signature help handlers for LSP.\n            vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(vim.lsp.handlers.hover, {\n                border = "rounded",\n            })\n\n            vim.lsp.handlers["textDocument/signatureHelp"] = vim.lsp.with(vim.lsp.handlers.signature_help, {\n                border = "rounded",\n            })\n\n            local opts = {\n                on_attach = on_attach,\n                capabilities = capabilities,\n            }\n\n            -- Setup LSP servers based on predefined configurations.\n            for _, language_server in pairs(language_servers) do\n                language_server = vim.split(language_server, "@")[1]\n                local require_ok, conf_opts = pcall(require, "plugins.language-settings." .. language_server)\n                if require_ok then\n                    conf_opts = vim.tbl_deep_extend("keep", conf_opts, opts)\n                    lspconfig[language_server].setup(conf_opts)\n                else\n                    lspconfig[language_server].setup(opts)\n                end\n            end\n        end\n    }\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\u5728 ",(0,s.jsx)(e.code,{children:"lua/plugins"})," \u4e0b\u65b0\u589e\u4e00\u500b ",(0,s.jsx)(e.code,{children:"language-settings"})," \u8cc7\u6599\u593e\u7528\u4f86\u653e\u4e0d\u540c language servers \u7684 ",(0,s.jsx)(e.code,{children:".lua"})," \u8a2d\u5b9a\u6a94\u6848\u3002","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["language servers \u7684\u8a2d\u5b9a\u6a94\u6a94\u540d\u548c ",(0,s.jsx)(e.code,{children:"language_servers"})," \u4e2d\u7684 server name \u4e00\u6a23\u3002"]}),"\n",(0,s.jsxs)(e.li,{children:["\u4e0d\u540c\u7684 language servers \u6709\u4e0d\u540c\u7684\u8a2d\u5b9a\u9078\u9805\uff0c\u53ef\u53c3\u8003 ",(0,s.jsx)(e.a,{href:"https://github.com/williamboman/mason-lspconfig.nvim?tab=readme-ov-file#available-lsp-servers",children:"mason-lspconfig: Available LSP servers"})]}),"\n"]}),"\n"]}),"\n"]})]})}function g(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>o});var s=i(6540);const a={},l=s.createContext(a);function r(n){const e=s.useContext(l);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),s.createElement(l.Provider,{value:e},n.children)}}}]);